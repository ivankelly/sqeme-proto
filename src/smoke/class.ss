(define smoke-class-vector '#())

(define (smoke-class-type class)
  (error "implement class type lookup"))
;  (define (find-class-type class)
;    (let loop ((methods (cadr (assq 'methods class))))
;	  (cond ((null? methods) #f)
;		((memq 'ctor (cadr (assq 'flags (car methods)))) (cadr (assq 'return (car methods))))
;		(else (loop (cdr methods))))))

(define (smoke-class-name class)
  (cadr (assq 'name class)))

(define (smoke-class-external? class)
  (cadr (assq 'external class)))

(define (smoke-class-id class)
  (cadr (assq 'id class)))

(define (smoke-class-make-inheritance-list start)
  (if (positive? start)
      (let loop ((i start))
	(if (positive? (smoke-c-get-inheritanceList i))
	    (cons (smoke-c-get-inheritanceList i) 
		  (loop (+ i 1)))
	    '()))
      '()))

(define (smoke-class-make-method-list index)
  (let ((maxindex (smoke-c-methodmap-count)))
    (let add-method ((i 0))
      (if (< i maxindex)
	  (let* ((methodmap (smoke-c-get-methodmap i))
		 (methodid (smoke-c-methodmap-method methodmap)))
	    (if (= (smoke-c-methodmap-classId methodmap) index)
		(if (positive? methodid)
		    (cons (smoke-make-method index methodid i) (add-method (+ i 1)))
		    (let add-ambig-method ((j (abs methodid))
					   (i 0))
		      (if (positive? (smoke-c-get-ambiguousMethodList j))
			  (cons (smoke-make-method index (smoke-c-get-ambiguousMethodList j) i) 
				(add-ambig-method (+ j 1) (+ i 1)))
			  '())))
		(add-method (+ i 1))))
	  '()))))

(define (smoke-make-class index)
  (let ((class (smoke-c-get-class index)))
    `((id ,index) 
      (name ,(smoke-c-class-className class)) 
      (flags ,(smoke-class-flags-to-symbols (smoke-c-class-flags class)))
      (methods ,(smoke-class-make-method-list index))
      (inherits ,(smoke-class-make-inheritance-list (smoke-c-class-parents class)))
      (external ,(smoke-c-class-external class)))))

;(define (smoke-class-by-name name)
;  (cond ((null? classtree) '())
;	((string=? type (cadr (assq 'name (car classtree)))) (car classtree))
;	(else (class-by-name (cdr classtree) type))))

(define (smoke-class-by-id id)
  (if (not (smoke-c-initialised?))
      (error "You must initialise smoke before using it, try (smoke-init-qt) or (smoke-init-qtwebkit)"))
  (let* ((obj (vector-ref smoke-class-vector id)))
    (if (null? obj)
	(let ((obj (smoke-make-class id)))
	  (vector-set! smoke-class-vector id obj)
	  obj)
	obj)))

(define (smoke-class-min-id) 1)

(define (smoke-class-max-id) (- (vector-length smoke-class-vector) 1))

(define (smoke-init family)
  (cond ((eq? family 'qt) (smoke-c-init-qt) (set! smoke-class-vector (make-vector (+ 1 (smoke-c-class-count)) '())))
	((eq? family 'qtwebkit) (smoke-c-init-qtwebkit) (set! smoke-class-vector (make-vector (+ 1 (smoke-c-class-count)) '())))
	(else (error (string-append "Unsupported API " (string->symbol family))))))


(define (smoke-class-subclasses class)
  (let loop ((i (smoke-class-min-id))
	     (max (smoke-class-max-id)))
    (cond ((> i max) '())
	  ((member (smoke-class-id class) (cadr (assq 'inherits (smoke-class-by-id i))))
	   (cons i (loop (+ i 1) max)))
	(else (loop (+ i 1) max)))))
