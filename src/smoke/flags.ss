
(define-macro (smoke-flag-to-symbol flags flag symbol symlist)
  `(if (positive? (bitwise-and ,flags ,flag)) (set! ,symlist (cons ,symbol ,symlist))))

(define (smoke-class-flags-to-symbols flags)
  (let ((symbs '()))
    (smoke-flag-to-symbol flags #x1 'constructor symbs)
    (smoke-flag-to-symbol flags #x2 'deepcopy symbs)
    (smoke-flag-to-symbol flags #x4 'virtual symbs)
    (smoke-flag-to-symbol flags #x10 'undefined symbs)
    symbs))

(define (smoke-method-flags-to-symbols flags)
  (let ((symbs '()))
    (smoke-flag-to-symbol flags #x1 'static symbs)
    (smoke-flag-to-symbol flags #x2 'const symbs)
    (smoke-flag-to-symbol flags #x4 'copyctor symbs)
    (smoke-flag-to-symbol flags #x8 'internal symbs)
    (smoke-flag-to-symbol flags #x10 'enum symbs)
    (smoke-flag-to-symbol flags #x20 'ctor symbs)
    (smoke-flag-to-symbol flags #x40 'dtor symbs)
    (smoke-flag-to-symbol flags #x80 'protected symbs)
    symbs))

(define (smoke-type-flags-to-symbols flags)
  (let ((symbs '()))
    (smoke-flag-to-symbol flags #x0f 'elem symbs)
    (smoke-flag-to-symbol flags #x10 'stack symbs)
    (smoke-flag-to-symbol flags #x20 'ptr symbs)
    (smoke-flag-to-symbol flags #x30 'ref symbs)
    (smoke-flag-to-symbol flags #x40 'const symbs)
    symbs))
